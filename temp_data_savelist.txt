        id_list = []  # int number
        box2d_list = []  # [xmin,ymin,xmax,ymax]
        box3d_list = []  # (8,3) array in rect camera coord
        input_list = []  # channel number = 4, xyz,intensity in rect camera coord
        label_list = []  # 1 for roi object, 0 for clutter
        type_list = []  # string e.g. Car
        heading_list = []  # ry (along y-axis in rect camera coord) radius of
        # (cont.) clockwise angle from positive x axis in velo coord.
        box3d_size_list = []  # array of l,w,h
        frustum_angle_list = []  # angle of 2d box center from pos x-axis
        sample_token_list = []
        annotation_token_list = []
        camera_data_token_list = []
        prob_list = []

    # check that everything is implemented
    if not from_rgb_detection:
        assert len(box3d_list) > 0
        assert len(label_list) > 0
        assert len(heading_list) > 0
        assert len(box3d_size_list) > 0
    else:
        assert len(prob_list) > 0

    assert len(frustum_angle_list) > 0
    assert len(type_list) > 0
    assert len(id_list) > 0
    assert len(box2d_list) > 0
    assert len(input_list) > 0

    if not from_rgb_detection:
        with open(output_filename, 'wb') as fp:
            pickle.dump(id_list, fp)
            pickle.dump(box2d_list, fp)
            pickle.dump(box3d_list, fp)
            pickle.dump(input_list, fp)
            pickle.dump(label_list, fp)
            pickle.dump(type_list, fp)
            pickle.dump(heading_list, fp)
            pickle.dump(box3d_size_list, fp)
            pickle.dump(frustum_angle_list, fp)
    else:
        with open(output_filename, 'wb') as fp:
            pickle.dump(id_list, fp)
            pickle.dump(box2d_list, fp)
            pickle.dump(input_list, fp)
            pickle.dump(type_list, fp)
            pickle.dump(frustum_angle_list, fp)
            pickle.dump(prob_list, fp)

    with open(token_filename, 'wb') as fp:
        pickle.dump(sample_token_list, fp)
        pickle.dump(annotation_token_list, fp)
        pickle.dump(camera_data_token_list, fp)
        pickle.dump(type_list, fp)


        if select_data_flag:
            id_list.append(data_idx)
            box2d_list.append(box_2d_pts)

            assert point_clouds_in_box.shape[1] == 3
            # assert point_clouds_in_box.shape[0] >0
            input_list.append(point_clouds_in_box)

            if not from_rgb_detection:
                label_list.append(label)
                box3d_size_list.append(size_lwh)
                heading_list.append(heading_angle)
                annotation_token_list.append(bounding_box.token)
                assert box3d_pts_3d.shape == (8, 3)
                box3d_list.append(box3d_pts_3d)  # 3D bounding box projected onto camera coordinates

            if not from_rgb_detection:
                type_list.append(bounding_box.name)
            else:
                type_list.append(object_of_interest_name[int(class_idx)])

            frustum_angle_list.append(frustum_angle)
            sample_token_list.append(sample_token)

            camera_data_token_list.append(camera_token)

            if from_rgb_detection:
                prob_list.append(score)